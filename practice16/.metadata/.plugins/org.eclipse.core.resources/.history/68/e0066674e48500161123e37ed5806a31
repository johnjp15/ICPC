
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.util.*;

public class ProblemC {

	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		
		int p = sc.nextInt();
		while(sc.hasNext())
		{
			int k = sc.nextInt();
			String y = sc.next();
			
			BigInteger years = new BigInteger(y);
			
			System.out.println(k + " " + (fib(new BigInteger(y))).mod(new BigInteger("1000000000")).intValue());
		}
	}
	
	
	public static BigInteger fib(BigInteger n)
	{
		//BigDecimal ret = (new BigDecimal("1")).divide(new BigDecimal(Math.sqrt(5)), 32, RoundingMode.HALF_UP).multiply( ((new BigDecimal(1.0 + Math.sqrt(5)).divide(new BigDecimal(2.0), 32, RoundingMode.HALF_UP).pow(n.intValue())).subtract((new BigDecimal(1.0 - Math.sqrt(5)).divide(new BigDecimal(2.0), 16, RoundingMode.HALF_UP)).pow(n.intValue())) ));
		BigDecimal first = (new BigDecimal("1")).divide(new BigDecimal(Math.sqrt(5)), 32, RoundingMode.HALF_UP);
		BigDecimal plus = ((new BigDecimal(1.0 + Math.sqrt(5)).divide(new BigDecimal(2.0), 32, RoundingMode.HALF_UP)));
		BigDecimal minus = ((new BigDecimal(1.0 - Math.sqrt(5)).divide(new BigDecimal(2.0), 32, RoundingMode.HALF_UP)));
		BigDecimal plusn = plus.pow(n.intValue());
		BigDecimal minusn = minus.pow(n.intValue());
		BigDecimal ret = first.multiply(plusn.subtract(minusn));
		
		//double ret = (1.0 / Math.sqrt(5)) * (Math.pow(((1.0 + Math.sqrt(5)) / 2.0), n) - Math.pow(((1.0 - Math.sqrt(5)) / 2.0), n));
		
		
		System.out.println("ret = " + ret.toString());
		System.out.println("ret.round = " + ret.setScale(0, RoundingMode.HALF_UP));
		return ret.round(new MathContext(0, RoundingMode.HALF_UP)).toBigInteger();
	}
}
